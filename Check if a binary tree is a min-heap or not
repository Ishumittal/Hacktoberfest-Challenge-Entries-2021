
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
 
// Data structure to store a binary tree node
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
 
// Function to find the total number of nodes in a binary tree
int size(Node* root)
{
    if (root == nullptr) {
        return 0;
    }
 
    return 1 + size(root->left) + size(root->right);
}
 
// Function to check if a given binary tree is a complete binary tree
// and each node has a higher value than its parent
bool isHeap(Node* root, int i, int n)
{
    // base case
    if (root == nullptr) {
        return true;
    }
 
    // not complete binary tree: out of valid index range
    if (i >= n) {
        return false;
    }
 
    // current node has a higher value than its left or right child
    if ((root->left && root->left->data <= root->data) ||
            (root->right && root->right->data <= root->data)) {
        return false;
    }
 
    // check for left and right subtree
    return isHeap(root->left, 2*i + 1, n) && isHeap(root->right, 2*i + 2, n);
}
 
// Function to check if a given binary tree is a min-heap or not
bool isHeap(Node* root)
{
    int i = 0;
    return isHeap(root, i, size(root));
}
 
int main()
{
    /* Construct the following tree
               2
             /   \
            /     \
           3       4
          / \     / \
         /   \   /   \
        5     6 8    10
    */
 
    Node* root = new Node(2);
    root->left = new Node(3);
    root->right = new Node(4);
    root->left->left = new Node(5);
    root->left->right = new Node(6);
    root->right->left = new Node(8);
    root->right->right = new Node(10);
 
    if (isHeap(root)) {
        cout << "The given binary tree is a min-heap";
    }
    else {
        cout << "The given binary tree is not a min-heap";
    }
 
    return 0;
}


